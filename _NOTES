//  - block definition
//  - code to block
//  - block to code
//  
//  - block definition
//  - code-block linkage
//    - ast to block
//    - block to ast
//  
//  
//    block -> xml -> xmlObj [->] ast
//    ast [->] xmlObj -> xml -> block
//  
//  ===
//  == AST
//  ===
//  
//    ├─ type: VariableDeclaration
//    ├─ declarations
//    │  └─ 0
//    │     ├─ type: VariableDeclarator
//    │     ├─ id
//    │     │  ├─ type: Identifier
//    │     │  └─ name: x
//    │     └─ init
//    │        ├─ type: Literal
//    │        ├─ value: 10
//    │        └─ raw: '10'
//    └─ kind: var
//  
//  ===
//  == XML OBJ
//  ===
//  
//  
//  
//  ===
//  == XML
//  ===
//  
//    <block type="jslang_var" inline="false" x="0" y="0">
//      <title name="VAR">x</title>
//    </block>

var treeify = require('treeify')
var esprima = require('esprima')
var escodegen = require('escodegen')
var xmlMapping = require('xml-mapping')
var html = require("html");

var targetXml = '<block type="jslang_var" inline="false" x="0" y="0"><title name="VAR">x</title></block>'

var src = "var x = \'10\'"

var parseOptions = {
  raw:true,
//  loc:true,
//  range:true,
//  tokens:true,
//  comment:true,
}
var genOptions = {
  comment:true,
}

var syntax = esprima.parse(src,parseOptions).body[0]
var recode = escodegen.generate(syntax,genOptions)

var output = console.log

output( '--- src' )
output( src )
output()
output( '--- ast' )
output( treeify.asTree(syntax,true) )
output()
output( '--- naive xml' )
output( html.prettyPrint(xmlMapping.dump(syntax)) )
output()
output( '--- target xml' )
output( html.prettyPrint(targetXml) )




